import logging
import sqlite3
import feedparser
from googletrans import Translator
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
from datetime import timedelta
import pytz

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL")
SUPPORT_LINK = "SUPPORT"

# === Telegram –±–æ—Ç ===
bot = Bot(token=TOKEN)

# === –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ ===
translator = Translator()

# === –ë–î –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ===
conn = sqlite3.connect("news.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS posted_links (link TEXT, timestamp DATETIME)")
conn.commit()

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
last_ad_time = datetime.now(pytz.UTC) - timedelta(days=4)

# === RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ===
rss_feeds = [
    "https://www.ign.com/articles/rss",
    "https://www.gamespot.com/feeds/mashup/",
    "https://www.polygon.com/rss/index.xml",
    "https://www.playground.ru/news",
    "https://stopgame.ru/news",
    "https://www.goha.ru/videogames",
    "https://gameguru.ru/articles/rubrics_news",
    "https://vkplay.ru/media/",
    "https://cubiq.ru/news/"
]

# === –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ ===
def translate_text(text):
    try:
        return translator.translate(text, src='en', dest='ru').text
    except:
        return text  # –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã ===
def send_advertisement():
    global last_ad_time
    time_diff = datetime.now(pytz.UTC) - last_ad_time
    if time_diff.total_seconds() < 3 * 24 * 60 * 60:
        logging.info(f"–†–µ–∫–ª–∞–º–∞ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å {3 * 24 * 60 * 60 - time_diff.total_seconds()} —Å–µ–∫—É–Ω–¥.")
        return

    # –ü–æ–ª–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤—Å—è –∏–Ω—Ñ–∞ –∏–¥—ë—Ç –≤ caption –ø–æ–¥ —Ñ–æ—Ç–æ)
    ad_caption = (
        "<b>‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî–†–ï–ö–õ–ê–ú–ê‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî</b>\n\n"
        "–•—ç–π, —Ç—É—Ç –µ—Å—Ç—å –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, —Ç–∞–º —á–µ–ª –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–≤–æ–π life –∏ –¥–µ–ª–∞–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏.\n"
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö."
    )

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É (–º–æ–∂–Ω–æ —Å PostImg –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç–∏–Ω–≥, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –ø—Ä—è–º–æ–π URL –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)
    ad_image_url = "https://i.postimg.cc/CxwC7B8R/forestroad.jpg"

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Forest Road üå≤", url="https://t.me/ForestRoad1")]
    ])

    try:
        # –í—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot.send_photo(
            chat_id=CHANNEL,
            photo=ad_image_url,
            caption=ad_caption,
            parse_mode='HTML',
            reply_markup=keyboard
        )

        logging.info("–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        last_ad_time = datetime.now(pytz.UTC)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")

# === –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π ===
def fetch_and_send_news():
    current_time = datetime.now(pytz.UTC)
    
    for url in rss_feeds:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            link = entry.link

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 35 –º–∏–Ω—É—Ç
            cursor.execute("SELECT * FROM posted_links WHERE link=? AND timestamp > ?", (link, current_time - timedelta(minutes=35)))
            if cursor.fetchone():
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ

            title = translate_text(entry.title)
            summary = translate_text(entry.summary)

            image = None
            if 'media_content' in entry and entry.media_content:
                image = entry.media_content[0]['url']
            elif 'media_thumbnail' in entry and entry.media_thumbnail:
                image = entry.media_thumbnail[0]['url']

            caption = f"<b>{title}</b>\n\n{summary}\n\n<a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: <a href='{SUPPORT_LINK}'>Forest Road</a>"

            try:
                if image:
                    bot.send_photo(chat_id=CHANNEL, photo=image, caption=caption, parse_mode='HTML')
                else:
                    bot.send_message(chat_id=CHANNEL, text=caption, parse_mode='HTML')

                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")
                cursor.execute("INSERT INTO posted_links (link, timestamp) VALUES (?, ?)", (link, current_time))
                conn.commit()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = BackgroundScheduler(timezone=pytz.UTC)
scheduler.add_job(fetch_and_send_news, 'interval', minutes=35)
scheduler.add_job(send_advertisement, 'interval', minutes= 3 * 24 * 60)  # –ö–∞–∂–¥—ã–µ 3 –¥–Ω—è
scheduler.start()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        while True:
            pass
    except (KeyboardInterrupt, SystemExit):
        scheduler.shutdown()
        conn.close()
